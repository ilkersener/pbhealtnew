name: Check Domains

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

jobs:
  check_domains:
    runs-on: windows-latest

    steps:
      - name: Depoyu Kopyala
        uses: actions/checkout@v3

      - name: Node.js Kur ve Paketleri Yükle
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Testleri Çalıştır ve Logları Kaydet
        run: npx cypress run | tee cypress-output.log
        shell: bash

      - name: Hatalı Domainleri Google Chat'e Gönder (Imgur destekli)
        if: failure()
        env:
          IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
          GOOGLE_CHAT_WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
        run: |
          $ErrorActionPreference = "Stop"

          $logPath = "cypress-output.log"
          if (!(Test-Path $logPath)) {
              Write-Host "Log dosyası yok, çıkılıyor."
              exit 0
          }

          $logContent = Get-Content $logPath -Raw
          $logContent = $logContent -replace "`e\[[\d;]*m", ""

          $errorMessages = @()
          foreach ($line in $logContent -split "`n") {
              if ($line -match "HATA:") {
                  $errorMessages += $line.Trim()
              }
          }

          if ($errorMessages.Count -eq 0) {
              Write-Host "Hata bulunamadı, çıkılıyor."
              exit 0
          }

          function Upload-ImgurImage($path) {
            $clientId = $env:IMGUR_CLIENT_ID
            if (-not (Test-Path $path)) {
              Write-Warning "Dosya bulunamadı: $path"
              return $null
            }
            Write-Host "Imgur'a yükleniyor: $path"
            $fileBytes = [System.IO.File]::ReadAllBytes($path)
            $base64 = [Convert]::ToBase64String($fileBytes)
            $body = @{ image = $base64 } | ConvertTo-Json
            $headers = @{ Authorization = "Client-ID $clientId" }

            try {
              $response = Invoke-RestMethod -Uri "https://api.imgur.com/3/image" -Method Post -Headers $headers -Body $body -ContentType "application/json"
              Write-Host "Imgur linki: $($response.data.link)"
              return $response.data.link
            } catch {
              Write-Warning "Imgur upload başarısız: $_"
              return $null
            }
          }

          $screenshotsDir = "cypress/screenshots/failures"

          $message = "⚠️ **PB Health Check**`n`n🟥 **Hatalı Hesaplar:**`n"
          $allImgurLinks = @()

          foreach ($errMsg in $errorMessages) {
              $pattern = "HATA:\s*(https?:\/\/[^\s]+)\s*→\s*(.+)"
              if ($errMsg -match $pattern) {
                  $link = $Matches[1]
                  $desc = $Matches[2]
              } else {
                  $link = "Bilinmeyen Link"
                  $desc = $errMsg
              }

              $fileNameBase = ($link -replace 'https?:\/\/|\/', '_').Trim('_').ToLower()

              if ($null -ne $screenshotPath) {
                  $imgurLink = Upload-ImgurImage $screenshotPath.FullName
                  if ($imgurLink) {
                      $message += "❌ Link: $link `n → $desc `n🔗 Ekran Görüntüsü: $imgurLink`n`n"
                      $allImgurLinks += $imgurLink
                  } else {
                      $message += "❌ Link: $link `n → $desc `n"
                  }
              } else {
                  $message += "❌ Link: $link `n → $desc `n"
              }
          }

          if ($allImgurLinks.Count -gt 0) {
              $message += "`n📸 **Ekran Görüntüleri:**`n"
              foreach ($imgLink in $allImgurLinks) {
                  $message += "$imgLink`n"
              }
          }

          $body = @{ text = $message } | ConvertTo-Json -Depth 10

          try {
            Invoke-RestMethod -Uri $env:GOOGLE_CHAT_WEBHOOK_URL -Method Post -Body $body -ContentType "application/json"
            Write-Host "Google Chat'e mesaj gönderildi."
          } catch {
            Write-Error "Google Chat mesaj gönderimi başarısız: $_"
            exit 1
          }
        shell: pwsh
